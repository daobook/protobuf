# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, xinetzone
# This file is distributed under the same license as the protobuf package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: protobuf \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-28 12:54+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../../examples/README.md:1
msgid "Protocol Buffers - Code Example"
msgstr "代码样例"

#: ../../../examples/README.md:3
msgid ""
"This directory contains example code that uses Protocol Buffers to manage"
" an address book. Two programs are provided for each supported language. "
"The add_person example adds a new person to an address book, prompting "
"the user to input the person's information. The list_people example lists"
" people already in the address book. The examples use the exact same "
"format in all three languages, so you can, for example, use "
"add_person_java to create an address book and then use list_people_python"
" to read it."
msgstr ""
"这个目录包含了使用协议缓冲区来管理地址簿的示例代码。"
"每种支持的语言都提供了两个程序。"
"add_person 示例将一个新的人添加到地址簿中，提示用户输入该人的信息。"
"list_people 的例子是列出已经在地址簿中的人。"
"这些例子在三种语言中使用完全相同的格式，因此你可以，例如，"
"使用 add_person_java 来创建一个地址簿，然后使用 list_people_python 来读取它。"

#: ../../../examples/README.md:11
msgid ""
"These examples are part of the Protocol Buffers tutorial, located at:   "
"https://developers.google.com/protocol-buffers/docs/tutorials"
msgstr ""
"这些例子是协议缓冲区教程的一部分，位于："
"https://developers.google.com/protocol-buffers/docs/tutorials"

#: ../../../examples/README.md:14
msgid "Build the example using bazel"
msgstr "使用 bazel 构建例子"

#: ../../../examples/README.md:16
msgid ""
"The example requires bazel 0.5.4 or newer to build. You can "
"download/install the latest version of bazel from bazel's release page:"
msgstr ""
"这个例子需要 bazel 0.5.4 或更新的版本来构建。"
"你可以从 bazel 的发布页面下载/安装最新版本的 bazel："

#: ../../../examples/README.md:21
msgid ""
"Once you have bazel installed, simply run the following command in this "
"examples directory to build the code:"
msgstr ""
"一旦你安装了 bazel，只需在这个 examples 目录下运行以下命令即可构建代码："

#: ../../../examples/README.md:26
msgid "Then you can run the built binary:"
msgstr "然后你就可以运行建立的二进制文件了:"

#: ../../../examples/README.md:30
msgid ""
"To use protobuf in your own bazel project, please follow instructions in "
"the [BUILD](BUILD) file and [WORKSPACE](WORKSPACE) file."
msgstr ""
"要在你自己的 bazel 项目中使用 protobuf，请遵循 "
" {download}`BUILD <../../examples/BUILD>` 文件和 {download}`WORKSPACE <../../examples/WORKSPACE>` 文件中的说明。"

#: ../../../examples/README.md:33
msgid "Build the example using make"
msgstr "使用 make 构建示例"

#: ../../../examples/README.md:35
msgid ""
"You must install the protobuf package before you can build it using make."
" The minimum requirement is to install protocol compiler (i.e., the "
"protoc binary) and the protobuf runtime for the language you want to "
"build."
msgstr ""
"你必须先安装 protobuf 包，然后才能用 make 构建它。"
"最低要求是安装协议编译器（即 protoc 二进制）和你要构建的语言的 protobuf 运行时。"

#: ../../../examples/README.md:39
msgid ""
"You can simply run \"make\" to build the example for all languages "
"(except for Go). However, since different language has different "
"installation requirement, it will likely fail. It's better to follow "
"individual instructions below to build only the language you are "
"interested in."
msgstr ""
"你可以简单地运行 \"make\" 来构建所有语言的例子（Go 除外）。"
"然而，由于不同的语言有不同的安装要求，它很可能会失败。"
"最好是按照下面的个别说明，只构建你感兴趣的语言。"

#: ../../../examples/README.md:44
msgid "C++"
msgstr ""

#: ../../../examples/README.md:46
msgid ""
"You can follow instructions in [../src/README.md](../src/README.md) to "
"install protoc and protobuf C++ runtime from source."
msgstr ""
"你可以按照 [../src/README.md](../src/README.md) 中的说明，"
"从源代码中安装 protoc 和 protobuf C++ 运行时。"

#: ../../../examples/README.md:49
msgid ""
"Then run \"make cpp\" in this examples directory to build the C++ "
"example. It will create two executables: add_person_cpp and "
"list_people_cpp. These programs simply take an address book file as their"
" parameter. The add_person_cpp programs will create the file if it "
"doesn't already exist."
msgstr ""
"然后在这个例子目录下运行 \"make cpp\" 来构建 C++ 例子。"
"它将创建两个可执行文件：add_person_cpp 和 list_people_cpp。"
"这些程序只是接受一个地址簿文件作为参数。"
"add_person_cpp 程序将创建该文件，如果它还不存在的话。"

#: ../../../examples/README.md:54 ../../../examples/README.md:131
msgid "To run the examples:"
msgstr "要运行这些例子："

#: ../../../examples/README.md:59
msgid ""
"Note that on some platforms you may have to edit the Makefile and remove "
"\"-lpthread\" from the linker commands (perhaps replacing it with "
"something else). We didn't do this automatically because we wanted to "
"keep the example simple."
msgstr ""
"注意，在某些平台上，你可能必须编辑 Makefile，"
"并从链接器命令中删除 \"-lpthread\" （也许用其他东西代替）。"
"我们没有自动这样做，因为我们想让这个例子保持简单。"

#: ../../../examples/README.md:63
msgid "Python"
msgstr ""

#: ../../../examples/README.md:65
msgid ""
"Follow instructions in [../README.md](../README.md) to install protoc and"
" then follow [../python/README.md](../python/README.md) to install "
"protobuf python runtime from source. You can also install python runtime "
"using pip:"
msgstr ""
"按照 [../README.md](../README.md) 中的说明安装 protoc，"
"然后按照 [../python/README.md](../python/README.md) 从源代码安装 protobuf python runtime。"
"你也可以用 pip 安装 python 运行时："

#: ../../../examples/README.md:71
msgid ""
"Make sure the runtime version is the same as protoc binary, or it may not"
" work."
msgstr ""
"确保运行时的版本与 protoc 二进制相同，否则可能无法工作。"

#: ../../../examples/README.md:73
msgid ""
"After you have install both protoc and python runtime, run \"make "
"python\" to build two executables (shell scripts actually): "
"add_person_python and list_people_python. They work the same way as the "
"C++ executables."
msgstr ""
"在你安装了 protoc 和 python 运行时之后，运行 \"make python\" "
"来建立两个可执行文件（实际上是 shell 脚本）：add_person_python 和 list_people_python。"
"它们的工作方式与 C++ 的可执行文件相同。"

#: ../../../examples/README.md:77
msgid "Java"
msgstr ""

#: ../../../examples/README.md:79
msgid ""
"Follow instructions in [../README.md](../README.md) to install protoc and"
" then download protobuf Java runtime .jar file from maven:"
msgstr ""
"按照 [../README.md](../README.md) 中的说明安装 protoc，"
"然后从 maven 下载 protobuf Java 运行时 .jar 文件："

#: ../../../examples/README.md:84
msgid "Then run the following:"
msgstr "然后运行以下内容："

#: ../../../examples/README.md:89
msgid ""
"This will create the add_person_java/list_people_java executables (shell "
"scripts) and can be used to create/display an address book data file."
msgstr ""
"这将创建 add_person_java/list_people_java 可执行文件（shell 脚本），"
"可用于创建/显示地址簿数据文件。"

#: ../../../examples/README.md:92
msgid "Go"
msgstr ""

#: ../../../examples/README.md:94
msgid ""
"Follow instructions in [../README.md](../README.md) to install protoc. "
"Then install the Go protoc plugin (protoc-gen-go):"
msgstr ""

#: ../../../examples/README.md:99
msgid ""
"The \"go install\" command will install protoc-gen-go into the GOBIN "
"directory.  You can set the $GOBIN environment variable before running "
"\"go install\" to change the install location.  Make sure the install "
"directory is in your shell $PATH."
msgstr ""

#: ../../../examples/README.md:104
msgid ""
"Build the Go samples with \"make go\".  This creates the following "
"executable files in the current directory:"
msgstr ""

#: ../../../examples/README.md:109
msgid "To run the example:"
msgstr ""

#: ../../../examples/README.md:113
msgid ""
"to add a person to the protocol buffer encoded file addressbook.data.  "
"The file is created if it does not exist.  To view the data, run:"
msgstr ""

#: ../../../examples/README.md:118
msgid ""
"Observe that the C++, Python, Java, and Dart examples in this directory "
"run in a similar way and can view/modify files created by the Go example "
"and vice versa."
msgstr ""

#: ../../../examples/README.md:122
msgid "Dart"
msgstr ""

#: ../../../examples/README.md:124
msgid ""
"First, follow the instructions in [../README.md](../README.md) to install"
" the Protocol Buffer Compiler (protoc)."
msgstr ""

#: ../../../examples/README.md:126
msgid ""
"Then, install the Dart Protocol Buffer plugin as described "
"[here](https://github.com/dart-lang/dart-protoc-plugin#how-to-build-and-"
"use). Note, the executable `bin/protoc-gen-dart` must be in your `PATH` "
"for `protoc` to find it."
msgstr ""

#: ../../../examples/README.md:129
msgid "Build the Dart samples in this directory with `make dart`."
msgstr ""

#: ../../../examples/README.md:138
msgid ""
"The two programs take a protocol buffer encoded file as their parameter. "
"The first can be used to add a person to the file. The file is created if"
" it does not exist. The second displays the data in the file."
msgstr ""

